(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[963],{63448:(n,e,s)=>{Promise.resolve().then(s.bind(s,99583))},77684:n=>{n.exports={vstable:"axios_vstable__tROfW"}},99583:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>j});var r=s(72311),d=s(25538),i=s(70753),h=s(81307),c=s(77684),l=s.n(c);function t(n){let e={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Axios"})," 和 ",(0,r.jsx)(e.code,{children:"Fetch"})," 都是在 JavaScript 应用中用来发起 HTTP 请求的流行工具，但它们在功能、语法和可用性方面存在一些差异。"]}),"\n",(0,r.jsx)(e.h2,{children:"Axios VS Fetch"}),"\n",(0,r.jsxs)("table",{className:l().vstable,children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"特点/功能"}),(0,r.jsx)("th",{children:"Axios"}),(0,r.jsx)("th",{children:"Fetch"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"基于"}),(0,r.jsx)("td",{children:"Promise"}),(0,r.jsx)("td",{children:"Promise"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"JSON 处理"}),(0,r.jsx)("td",{children:"自动处理 JSON 数据"}),(0,r.jsx)("td",{children:"需要手动处理 JSON 数据"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"运行环境"}),(0,r.jsx)("td",{children:"浏览器和 Node.js"}),(0,r.jsx)("td",{children:"浏览器 (原生支持)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"请求/响应拦截"}),(0,r.jsx)("td",{children:"支持"}),(0,r.jsx)("td",{children:"不支持"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"超时设置"}),(0,r.jsx)("td",{children:"支持"}),(0,r.jsx)("td",{children:"不支持（需要额外处理）"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"错误处理"}),(0,r.jsx)("td",{children:"更详细的错误信息"}),(0,r.jsx)("td",{children:"较基本的错误处理"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"请求取消"}),(0,r.jsx)("td",{children:"支持"}),(0,r.jsx)("td",{children:"支持（使用 AbortController）"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"设置 HTTP 头"}),(0,r.jsx)("td",{children:"简单易用"}),(0,r.jsx)("td",{children:"需要更多配置"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"发送/接收 Cookies"}),(0,r.jsx)("td",{children:"默认不发送/接收，可配置"}),(0,r.jsx)("td",{children:"默认不发送/接收，可配置"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"安全性（CSRF/XSRF 防护）"}),(0,r.jsx)("td",{children:"内置支持"}),(0,r.jsx)("td",{children:"需要手动处理"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"使用方式"}),(0,r.jsx)("td",{children:"需要安装库"}),(0,r.jsx)("td",{children:"浏览器原生支持，无需安装额外库"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"数据传输进度"}),(0,r.jsx)("td",{children:"支持"}),(0,r.jsx)("td",{children:"不支持"})]})]})]}),"\n",(0,r.jsx)(e.h3,{children:"请求/响应拦截器"}),"\n",(0,r.jsx)(e.p,{children:"在 HTTP 请求的上下文中，请求/响应拦截器是非常强大的功能，它们允许开发者在请求发送到服务器和服务器响应返回到客户端之前，拦截并操作这些请求和响应。Axios 和 Fetch 在这方面的支持程度不同。"}),"\n",(0,r.jsx)(e.h4,{children:"Axios 的请求/响应拦截器"}),"\n",(0,r.jsx)(e.p,{children:"Axios 支持请求和响应拦截器，这使得它在处理复杂的 HTTP 通信方面非常灵活和强大。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"请求拦截器"}),"：在请求被发送到服务器之前，允许你修改请求配置，如设置通用的头部、添加认证信息、日志记录或者在发送请求前执行某些动作。"]}),"\n",(0,r.jsx)(e.p,{children:"示例："}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.A,{language:"bash",style:h.A,showLineNumbers:!0,children:"axios.interceptors.request.use(config => {\n    // 修改 config\n    config.headers['Authorization'] = 'Bearer token';\n    return config;\n  }, error => {\n    // 请求错误的处理\n    return Promise.reject(error);\n  });"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"响应拦截器"}),"：在服务器响应到达客户端之前，允许你处理响应数据，如统一处理错误、格式化响应数据等。"]}),"\n",(0,r.jsx)(e.p,{children:"示例："}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.A,{language:"bash",style:h.A,showLineNumbers:!0,children:"axios.interceptors.response.use(response => {\n    // 处理响应数据\n    return response;\n  }, error => {\n    // 响应错误的处理\n    return Promise.reject(error);\n  });"}),"\n",(0,r.jsx)(e.h4,{children:"Fetch 的请求/响应拦截器"}),"\n",(0,r.jsx)(e.p,{children:"Fetch API 并不原生支持请求和响应的拦截器。这意味着如果你需要类似的功能，你可能需要手动实现它，或者使用额外的库来提供这种功能。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["对于请求，你可以在调用 ",(0,r.jsx)(e.code,{children:"fetch"})," 之前手动修改请求参数。"]}),"\n",(0,r.jsxs)(e.li,{children:["对于响应，你可以在处理 ",(0,r.jsx)(e.code,{children:"fetch"})," 返回的 promise 时添加逻辑来实现类似的效果。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"示例（模拟响应拦截器）："}),"\n",(0,r.jsx)(i.A,{language:"bash",style:h.A,showLineNumbers:!0,children:"fetch(url)\n  .then(response => {\n    // 检查并处理特定的响应状态\n    if (!response.ok) {\n      throw new Error('Response error');\n    }\n    return response.json();\n  })\n  .then(data => {\n    // 处理数据\n  })\n  .catch(error => {\n    // 错误处理\n  });"}),"\n",(0,r.jsx)(e.h4,{children:"响应拦截器 - 总结"}),"\n",(0,r.jsx)(e.p,{children:"Axios 的请求和响应拦截器提供了更多的灵活性和控制力，特别是在构建需要复杂 HTTP 请求处理的应用时。而 Fetch 由于缺乏这种内置支持，使用起来在某些复杂场景下可能不够方便。在选择适合的工具时，这可能是一个重要的考虑因素。"}),"\n",(0,r.jsx)(e.h3,{children:"总结 - 选择使用哪个"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"如果你需要更多的内置功能，比如取消请求、拦截器或自动转换 JSON，Axios 是一个好选择。"}),"\n",(0,r.jsx)(e.li,{children:"如果你倾向于使用原生 API 并且不介意编写额外的配置或封装，或者你的项目是一个轻量级的或不需要额外依赖的项目，Fetch 是一个不错的选择。"}),"\n"]})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(t,{...n})}):t(n)}function j(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"container md",children:(0,r.jsx)(x,{})})})}}},n=>{var e=e=>n(n.s=e);n.O(0,[671,840,789,20,358],()=>e(63448)),_N_E=n.O()}]);